<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/VVMoviePlayerViewController.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/VVMoviePlayerViewController</TokenIdentifier>
			<Abstract type="html">The VVMoviePlayerViewController class implements a simple view controller for displaying full-screen VolarVideo movies. Unlike using an VVMoviePlayerController object on its own to present a movie immediately, you can incorporate a movie player view controller wherever you would normally use a view controller. For example, you can present it using a tab bar or navigation bar-based interface, taking advantage of the transitions offered by those interfaces.</Abstract>
			<DeclaredIn>VVMoviePlayerViewController.h</DeclaredIn>
			
			<NodeRef refid="4"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerViewController/initWithExtendedVMAPURIString:</TokenIdentifier>
			<Abstract type="html">Returns a VolarVideo movie player view controller initialized with the specified movie.</Abstract>
			<DeclaredIn>VVMoviePlayerViewController.h</DeclaredIn>			
			
			<Declaration>- (id)initWithExtendedVMAPURIString:(NSString *)extendedVMAPURL</Declaration>
			<Parameters>
				<Parameter>
					<Name>extendedVMAPURL</Name>
					<Abstract type="html">The string representation of the URL that points to the content to be played.

@return
A VolarVideo movie player view controller initialized with the specified string represenation of the VolarVMAP URL.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithExtendedVMAPURIString:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerViewController/initAndStartWithExtendedVMAPURIString:</TokenIdentifier>
			<Abstract type="html">Returns and starts to play a VolarVideo movie player view controller initialized with the specified movie.</Abstract>
			<DeclaredIn>VVMoviePlayerViewController.h</DeclaredIn>			
			
			<Declaration>- (id)initAndStartWithExtendedVMAPURIString:(NSString *)extendedVMAPURL</Declaration>
			<Parameters>
				<Parameter>
					<Name>extendedVMAPURL</Name>
					<Abstract type="html">The string representation of the URL that points to the content to be played.

@return
A VolarVideo movie player view controller initialized with the specified string represenation of the VolarVMAP URL.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initAndStartWithExtendedVMAPURIString:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerViewController/startVMAP:</TokenIdentifier>
			<Abstract type="html">Starts playing a previously initialized VVMoviePlayerController object with the VolarVideo movie at the specified NSString representation of a URL.</Abstract>
			<DeclaredIn>VVMoviePlayerViewController.h</DeclaredIn>			
			
			<Declaration>- (void)startVMAP:(NSString *)vmapString</Declaration>
			<Parameters>
				<Parameter>
					<Name>vmapString</Name>
					<Abstract type="html">The location of the VolarVideo movie file. This file must be located either in your app directory or on a remote server.

@discussion
This method re-initializes a VolarVideo movie player, prepares for playback, and starts playing.

To be notified when a the movie player is ready to play, register for the MPMoviePlayerLoadStateDidChangeNotification notification. You can then check load state by accessing the loadState property.

To check for errors in URL loading, register for the MPMoviePlayerPlaybackDidFinishNotification notification. On error, this notification contains an NSError object available using the @&quot;error&quot; key in the notification’s userInfo dictionary.

@availability
Available in iOS 5.0 and later.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/startVMAP:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerViewController/setMoviePlayer:</TokenIdentifier>
			<Abstract type="html">The VolarVideo movie player controller object used to present the movie. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) VVMoviePlayerController *moviePlayer</Declaration>
			
			
			<Anchor>//api/name/moviePlayer</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerViewController/moviePlayer</TokenIdentifier>
			<Abstract type="html">The VolarVideo movie player controller object used to present the movie. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) VVMoviePlayerController *moviePlayer</Declaration>
			
			
			<Anchor>//api/name/moviePlayer</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerViewController/moviePlayer</TokenIdentifier>
			<Abstract type="html">The VolarVideo movie player controller object used to present the movie. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) VVMoviePlayerController *moviePlayer</Declaration>
			
			
			<Anchor>//api/name/moviePlayer</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerViewController/shouldAutorotateToInterfaceOrientation:</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value indicating whether the view controller supports the specified orientation.</Abstract>
			<DeclaredIn>VVMoviePlayerViewController.h</DeclaredIn>			
			
			<Declaration>- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation</Declaration>
			<Parameters>
				<Parameter>
					<Name>toInterfaceOrientation</Name>
					<Abstract type="html">The orientation of the application’s user interface after the rotation. The possible values are described in UIInterfaceOrientation.

@return
YES if the view controller supports the specified orientation or NO if it does not.

@discussion
This method is an override that replaces the default behavior by returning YES for the UIInterfaceOrientationPortrait, UIInterfaceOrientationLandscapeLeft, and UIInterfaceOrientationLandscapeRight orientations.

@availability
Available in iOS 5.0 or later.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/shouldAutorotateToInterfaceOrientation:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
	</File>
</Tokens>