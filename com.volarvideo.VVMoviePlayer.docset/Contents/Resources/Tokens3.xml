<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/VVMoviePlayerController.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/VVMoviePlayerController</TokenIdentifier>
			<Abstract type="html">A VolarVideo movie player (of type VVMoviePlayerController) manages the playback of a movie from a file or a network stream. Playback occurs in a view owned by the VolarVideo movie player and takes place either fullscreen or inline. You can incorporate a movie player’s view into a view hierarchy owned by your app, or use an VVMoviePlayerViewController object to manage the presentation for you.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/initWithExtendedVMAPURIString:</TokenIdentifier>
			<Abstract type="html">Returns a VVMoviePlayerController object initialized with the VolarVideo movie at the specified NSString representation of a URL.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>- (id)initWithExtendedVMAPURIString:(NSString *)extendedUriString</Declaration>
			<Parameters>
				<Parameter>
					<Name>extendedUriString</Name>
					<Abstract type="html">The location of the VolarVideo movie file. This file must be located either in your app directory or on a remote server.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The VolarVideo movie player object.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithExtendedVMAPURIString:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/initAndStartWithExtendedVMAPURIString:</TokenIdentifier>
			<Abstract type="html">Returns and starts playing a VVMoviePlayerController object initialized with the VolarVideo movie at the specified NSString representation of a URL.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>- (id)initAndStartWithExtendedVMAPURIString:(NSString *)extendedUriString</Declaration>
			<Parameters>
				<Parameter>
					<Name>extendedUriString</Name>
					<Abstract type="html">The location of the VolarVideo movie file. This file must be located either in your app directory or on a remote server.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The VolarVideo movie player object.</Abstract></ReturnValue>
			<Anchor>//api/name/initAndStartWithExtendedVMAPURIString:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/startVMAP:</TokenIdentifier>
			<Abstract type="html">Starts playing a previously initialized VVMoviePlayerController object with the VolarVideo movie at the specified NSString representation of a URL.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>- (void)startVMAP:(NSString *)vmapString</Declaration>
			<Parameters>
				<Parameter>
					<Name>vmapString</Name>
					<Abstract type="html">The location of the VolarVideo movie file. This file must be located either in your app directory or on a remote server.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/startVMAP:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setExtendedVMAPURL:</TokenIdentifier>
			<Abstract type="html">The NSURL for the VolarExtendedVMAP file.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSURL *extendedVMAPURL</Declaration>
			
			<ReturnValue><Abstract type="html">The NSURL for the VolarExtendedVMAP file.</Abstract></ReturnValue>
			<Anchor>//api/name/extendedVMAPURL</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/extendedVMAPURL</TokenIdentifier>
			<Abstract type="html">The NSURL for the VolarExtendedVMAP file.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSURL *extendedVMAPURL</Declaration>
			
			<ReturnValue><Abstract type="html">The NSURL for the VolarExtendedVMAP file.</Abstract></ReturnValue>
			<Anchor>//api/name/extendedVMAPURL</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/extendedVMAPURL</TokenIdentifier>
			<Abstract type="html">The NSURL for the VolarExtendedVMAP file.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSURL *extendedVMAPURL</Declaration>
			
			<ReturnValue><Abstract type="html">The NSURL for the VolarExtendedVMAP file.</Abstract></ReturnValue>
			<Anchor>//api/name/extendedVMAPURL</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setAirPlayVideoActive:</TokenIdentifier>
			<Abstract type="html">Indicates whether the movie player is currently playing video via AirPlay.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL airPlayVideoActive</Declaration>
			
			
			<Anchor>//api/name/airPlayVideoActive</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/airPlayVideoActive</TokenIdentifier>
			<Abstract type="html">Indicates whether the movie player is currently playing video via AirPlay.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL airPlayVideoActive</Declaration>
			
			
			<Anchor>//api/name/airPlayVideoActive</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/airPlayVideoActive</TokenIdentifier>
			<Abstract type="html">Indicates whether the movie player is currently playing video via AirPlay.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL airPlayVideoActive</Declaration>
			
			
			<Anchor>//api/name/airPlayVideoActive</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setAllowsAirPlay:</TokenIdentifier>
			<Abstract type="html">Specifies whether the movie player allows AirPlay movie playback.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL allowsAirPlay</Declaration>
			
			
			<Anchor>//api/name/allowsAirPlay</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/allowsAirPlay</TokenIdentifier>
			<Abstract type="html">Specifies whether the movie player allows AirPlay movie playback.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL allowsAirPlay</Declaration>
			
			
			<Anchor>//api/name/allowsAirPlay</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/allowsAirPlay</TokenIdentifier>
			<Abstract type="html">Specifies whether the movie player allows AirPlay movie playback.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL allowsAirPlay</Declaration>
			
			
			<Anchor>//api/name/allowsAirPlay</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setContentURL:</TokenIdentifier>
			<Abstract type="html">The URL that points to the raw HLS form of the VolarVideo movie file.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSURL *contentURL</Declaration>
			
			
			<Anchor>//api/name/contentURL</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/contentURL</TokenIdentifier>
			<Abstract type="html">The URL that points to the raw HLS form of the VolarVideo movie file.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSURL *contentURL</Declaration>
			
			
			<Anchor>//api/name/contentURL</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/contentURL</TokenIdentifier>
			<Abstract type="html">The URL that points to the raw HLS form of the VolarVideo movie file.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSURL *contentURL</Declaration>
			
			
			<Anchor>//api/name/contentURL</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setControlStyle:</TokenIdentifier>
			<Abstract type="html">The style of the playback controls.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) MPMovieControlStyle controlStyle</Declaration>
			
			
			<Anchor>//api/name/controlStyle</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/controlStyle</TokenIdentifier>
			<Abstract type="html">The style of the playback controls.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) MPMovieControlStyle controlStyle</Declaration>
			
			
			<Anchor>//api/name/controlStyle</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/controlStyle</TokenIdentifier>
			<Abstract type="html">The style of the playback controls.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) MPMovieControlStyle controlStyle</Declaration>
			
			
			<Anchor>//api/name/controlStyle</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setFullscreen:</TokenIdentifier>
			<Abstract type="html">A Boolean that indicates whether the movie player is in full-screen mode.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, getter=isFullscreen) BOOL fullscreen</Declaration>
			
			
			<Anchor>//api/name/fullscreen</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/isFullscreen</TokenIdentifier>
			<Abstract type="html">A Boolean that indicates whether the movie player is in full-screen mode.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, getter=isFullscreen) BOOL fullscreen</Declaration>
			
			
			<Anchor>//api/name/fullscreen</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/fullscreen</TokenIdentifier>
			<Abstract type="html">A Boolean that indicates whether the movie player is in full-screen mode.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, getter=isFullscreen) BOOL fullscreen</Declaration>
			
			
			<Anchor>//api/name/fullscreen</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setMovieMediaTypes:</TokenIdentifier>
			<Abstract type="html">The types of media available in the movie. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) MPMovieMediaTypeMask movieMediaTypes</Declaration>
			
			
			<Anchor>//api/name/movieMediaTypes</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/movieMediaTypes</TokenIdentifier>
			<Abstract type="html">The types of media available in the movie. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) MPMovieMediaTypeMask movieMediaTypes</Declaration>
			
			
			<Anchor>//api/name/movieMediaTypes</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/movieMediaTypes</TokenIdentifier>
			<Abstract type="html">The types of media available in the movie. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) MPMovieMediaTypeMask movieMediaTypes</Declaration>
			
			
			<Anchor>//api/name/movieMediaTypes</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setMovieSourceType:</TokenIdentifier>
			<Abstract type="html">The playback type of the movie.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) MPMovieSourceType movieSourceType</Declaration>
			
			
			<Anchor>//api/name/movieSourceType</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/movieSourceType</TokenIdentifier>
			<Abstract type="html">The playback type of the movie.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) MPMovieSourceType movieSourceType</Declaration>
			
			
			<Anchor>//api/name/movieSourceType</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/movieSourceType</TokenIdentifier>
			<Abstract type="html">The playback type of the movie.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) MPMovieSourceType movieSourceType</Declaration>
			
			
			<Anchor>//api/name/movieSourceType</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setNaturalSize:</TokenIdentifier>
			<Abstract type="html">The width and height of the movie frame. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) CGSize naturalSize</Declaration>
			
			
			<Anchor>//api/name/naturalSize</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/naturalSize</TokenIdentifier>
			<Abstract type="html">The width and height of the movie frame. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) CGSize naturalSize</Declaration>
			
			
			<Anchor>//api/name/naturalSize</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/naturalSize</TokenIdentifier>
			<Abstract type="html">The width and height of the movie frame. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) CGSize naturalSize</Declaration>
			
			
			<Anchor>//api/name/naturalSize</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setFullscreen:animated:</TokenIdentifier>
			<Abstract type="html">Causes the movie player to enter or exit full-screen mode.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>- (void)setFullscreen:(BOOL)fullscreen animated:(BOOL)animated</Declaration>
			<Parameters>
				<Parameter>
					<Name>fullscreen</Name>
					<Abstract type="html">Specify YES to enter full-screen mode or NO to exit full-screen mode.</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">Specify YES to animate the transition between modes or NO to switch immediately to the new mode.

@availability Available in iOS 5.0 and later.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setFullscreen:animated:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setScalingMode:</TokenIdentifier>
			<Abstract type="html">The scaling mode to use when displaying the movie.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) MPMovieScalingMode scalingMode</Declaration>
			
			
			<Anchor>//api/name/scalingMode</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/scalingMode</TokenIdentifier>
			<Abstract type="html">The scaling mode to use when displaying the movie.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) MPMovieScalingMode scalingMode</Declaration>
			
			
			<Anchor>//api/name/scalingMode</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/scalingMode</TokenIdentifier>
			<Abstract type="html">The scaling mode to use when displaying the movie.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) MPMovieScalingMode scalingMode</Declaration>
			
			
			<Anchor>//api/name/scalingMode</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setDuration:</TokenIdentifier>
			<Abstract type="html">The duration of the movie, measured in seconds. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSTimeInterval duration</Declaration>
			
			
			<Anchor>//api/name/duration</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/duration</TokenIdentifier>
			<Abstract type="html">The duration of the movie, measured in seconds. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSTimeInterval duration</Declaration>
			
			
			<Anchor>//api/name/duration</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/duration</TokenIdentifier>
			<Abstract type="html">The duration of the movie, measured in seconds. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSTimeInterval duration</Declaration>
			
			
			<Anchor>//api/name/duration</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setPlayableDuration:</TokenIdentifier>
			<Abstract type="html">The amount of currently playable content. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSTimeInterval playableDuration</Declaration>
			
			
			<Anchor>//api/name/playableDuration</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/playableDuration</TokenIdentifier>
			<Abstract type="html">The amount of currently playable content. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSTimeInterval playableDuration</Declaration>
			
			
			<Anchor>//api/name/playableDuration</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/playableDuration</TokenIdentifier>
			<Abstract type="html">The amount of currently playable content. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) NSTimeInterval playableDuration</Declaration>
			
			
			<Anchor>//api/name/playableDuration</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setBackgroundView:</TokenIdentifier>
			<Abstract type="html">A customizable view that is displayed behind the movie content. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) IBOutlet UIView *backgroundView</Declaration>
			
			
			<Anchor>//api/name/backgroundView</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/backgroundView</TokenIdentifier>
			<Abstract type="html">A customizable view that is displayed behind the movie content. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) IBOutlet UIView *backgroundView</Declaration>
			
			
			<Anchor>//api/name/backgroundView</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/backgroundView</TokenIdentifier>
			<Abstract type="html">A customizable view that is displayed behind the movie content. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) IBOutlet UIView *backgroundView</Declaration>
			
			
			<Anchor>//api/name/backgroundView</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setEndPlaybackTime:</TokenIdentifier>
			<Abstract type="html">The end time (measured in seconds) for playback of the movie.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) NSTimeInterval endPlaybackTime</Declaration>
			
			
			<Anchor>//api/name/endPlaybackTime</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/endPlaybackTime</TokenIdentifier>
			<Abstract type="html">The end time (measured in seconds) for playback of the movie.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) NSTimeInterval endPlaybackTime</Declaration>
			
			
			<Anchor>//api/name/endPlaybackTime</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/endPlaybackTime</TokenIdentifier>
			<Abstract type="html">The end time (measured in seconds) for playback of the movie.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) NSTimeInterval endPlaybackTime</Declaration>
			
			
			<Anchor>//api/name/endPlaybackTime</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setInitialPlaybackTime:</TokenIdentifier>
			<Abstract type="html">The time, specified in seconds within the video timeline, when playback should start.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) NSTimeInterval initialPlaybackTime</Declaration>
			
			
			<Anchor>//api/name/initialPlaybackTime</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/initialPlaybackTime</TokenIdentifier>
			<Abstract type="html">The time, specified in seconds within the video timeline, when playback should start.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) NSTimeInterval initialPlaybackTime</Declaration>
			
			
			<Anchor>//api/name/initialPlaybackTime</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/initialPlaybackTime</TokenIdentifier>
			<Abstract type="html">The time, specified in seconds within the video timeline, when playback should start.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) NSTimeInterval initialPlaybackTime</Declaration>
			
			
			<Anchor>//api/name/initialPlaybackTime</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setLoadState:</TokenIdentifier>
			<Abstract type="html">The network load state of the movie player. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) MPMovieLoadState loadState</Declaration>
			
			
			<Anchor>//api/name/loadState</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/loadState</TokenIdentifier>
			<Abstract type="html">The network load state of the movie player. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) MPMovieLoadState loadState</Declaration>
			
			
			<Anchor>//api/name/loadState</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/loadState</TokenIdentifier>
			<Abstract type="html">The network load state of the movie player. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) MPMovieLoadState loadState</Declaration>
			
			
			<Anchor>//api/name/loadState</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setPlaybackState:</TokenIdentifier>
			<Abstract type="html">The current playback state of the movie player. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) MPMoviePlaybackState playbackState</Declaration>
			
			
			<Anchor>//api/name/playbackState</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/playbackState</TokenIdentifier>
			<Abstract type="html">The current playback state of the movie player. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) MPMoviePlaybackState playbackState</Declaration>
			
			
			<Anchor>//api/name/playbackState</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/playbackState</TokenIdentifier>
			<Abstract type="html">The current playback state of the movie player. (read-only)</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) MPMoviePlaybackState playbackState</Declaration>
			
			
			<Anchor>//api/name/playbackState</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/set_0:</TokenIdentifier>
			<Abstract type="html">A Boolean that indicates whether the first video frame of the movie is ready to be displayed.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL readyForDisplay NS_AVAILABLE_IOS ( 6 _0</Declaration>
			
			
			<Anchor>//api/name/_0</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/_0</TokenIdentifier>
			<Abstract type="html">A Boolean that indicates whether the first video frame of the movie is ready to be displayed.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL readyForDisplay NS_AVAILABLE_IOS ( 6 _0</Declaration>
			
			
			<Anchor>//api/name/_0</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/_0</TokenIdentifier>
			<Abstract type="html">A Boolean that indicates whether the first video frame of the movie is ready to be displayed.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) BOOL readyForDisplay NS_AVAILABLE_IOS ( 6 _0</Declaration>
			
			
			<Anchor>//api/name/_0</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setRepeatMode:</TokenIdentifier>
			<Abstract type="html">Determines how the movie player repeats the playback of the movie.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) MPMovieRepeatMode repeatMode</Declaration>
			
			
			<Anchor>//api/name/repeatMode</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/repeatMode</TokenIdentifier>
			<Abstract type="html">Determines how the movie player repeats the playback of the movie.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) MPMovieRepeatMode repeatMode</Declaration>
			
			
			<Anchor>//api/name/repeatMode</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/repeatMode</TokenIdentifier>
			<Abstract type="html">Determines how the movie player repeats the playback of the movie.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) MPMovieRepeatMode repeatMode</Declaration>
			
			
			<Anchor>//api/name/repeatMode</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setShouldAutoplay:</TokenIdentifier>
			<Abstract type="html">A Boolean that indicates whether a movie should begin playback automatically.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL shouldAutoplay</Declaration>
			
			
			<Anchor>//api/name/shouldAutoplay</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/shouldAutoplay</TokenIdentifier>
			<Abstract type="html">A Boolean that indicates whether a movie should begin playback automatically.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL shouldAutoplay</Declaration>
			
			
			<Anchor>//api/name/shouldAutoplay</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/shouldAutoplay</TokenIdentifier>
			<Abstract type="html">A Boolean that indicates whether a movie should begin playback automatically.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL shouldAutoplay</Declaration>
			
			
			<Anchor>//api/name/shouldAutoplay</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/timedMetadata</TokenIdentifier>
			<Abstract type="html">Obtains the most recent time-based metadata provided by the streamed movie.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)timedMetadata</Declaration>
			
			<ReturnValue><Abstract type="html">An array of the most recent MPTimedMetadata objects provided by the streamed movie.

@availability NOT ACTIVE AT THIS TIME.</Abstract></ReturnValue>
			<Anchor>//api/name/timedMetadata</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/cancelAllThumbnailImageRequests</TokenIdentifier>
			<Abstract type="html">Cancels all pending asynchronous thumbnail image requests.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>- (void)cancelAllThumbnailImageRequests</Declaration>
			
			
			<Anchor>//api/name/cancelAllThumbnailImageRequests</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/requestThumbnailImagesAtTimes:timeOption:</TokenIdentifier>
			<Abstract type="html">Captures one or more thumbnail images asynchronously from the current movie.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>- (void)requestThumbnailImagesAtTimes:(NSArray *)playbackTimes timeOption:(MPMovieTimeOption)option</Declaration>
			<Parameters>
				<Parameter>
					<Name>playbackTimes</Name>
					<Abstract type="html">An array of NSNumber objects containing the times at which to capture the thumbnail images. Each time value represents the number of seconds from the beginning of the current movie.</Abstract>
				</Parameter><Parameter>
					<Name>option</Name>
					<Abstract type="html">The option to use when determining which specific frame to use for each thumbnail image. For a list of possible values, see “MPMovieTimeOption.”</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestThumbnailImagesAtTimes:timeOption:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/thumbnailImageAtTime:timeOption:</TokenIdentifier>
			<Abstract type="html">Captures and returns a thumbnail image from the current movie.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>- (UIImage *)thumbnailImageAtTime:(NSTimeInterval)playbackTime timeOption:(MPMovieTimeOption)option</Declaration>
			<Parameters>
				<Parameter>
					<Name>playbackTime</Name>
					<Abstract type="html">The time at which to capture the thumbnail image. The time value represents the number of seconds from the beginning of the current movie.</Abstract>
				</Parameter><Parameter>
					<Name>option</Name>
					<Abstract type="html">The option to use when determining which specific frame to use for the thumbnail image. For a list of possible values, see “MPMovieTimeOption.”</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An image object containing the image from the movie or nil if the thumbnail could not be captured.</Abstract></ReturnValue>
			<Anchor>//api/name/thumbnailImageAtTime:timeOption:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setAccessLog:</TokenIdentifier>
			<Abstract type="html">A snapshot of the network playback log for the movie player if it is playing a network stream.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) MPMovieAccessLog *accessLog</Declaration>
			
			
			<Anchor>//api/name/accessLog</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/accessLog</TokenIdentifier>
			<Abstract type="html">A snapshot of the network playback log for the movie player if it is playing a network stream.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) MPMovieAccessLog *accessLog</Declaration>
			
			
			<Anchor>//api/name/accessLog</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/accessLog</TokenIdentifier>
			<Abstract type="html">A snapshot of the network playback log for the movie player if it is playing a network stream.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) MPMovieAccessLog *accessLog</Declaration>
			
			
			<Anchor>//api/name/accessLog</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setErrorLog:</TokenIdentifier>
			<Abstract type="html">A snapshot of the playback failure error log for the movie player if it is playing a network stream.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) MPMovieErrorLog *errorLog</Declaration>
			
			
			<Anchor>//api/name/errorLog</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/errorLog</TokenIdentifier>
			<Abstract type="html">A snapshot of the playback failure error log for the movie player if it is playing a network stream.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) MPMovieErrorLog *errorLog</Declaration>
			
			
			<Anchor>//api/name/errorLog</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/errorLog</TokenIdentifier>
			<Abstract type="html">A snapshot of the playback failure error log for the movie player if it is playing a network stream.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) MPMovieErrorLog *errorLog</Declaration>
			
			
			<Anchor>//api/name/errorLog</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setMessageLabel:</TokenIdentifier>
			<Abstract type="html">The currently displayed message used to indicate an special playing circumstance, such as Audio Only or No Ads Available.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) IBOutlet UILabel *messageLabel</Declaration>
			
			
			<Anchor>//api/name/messageLabel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/messageLabel</TokenIdentifier>
			<Abstract type="html">The currently displayed message used to indicate an special playing circumstance, such as Audio Only or No Ads Available.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) IBOutlet UILabel *messageLabel</Declaration>
			
			
			<Anchor>//api/name/messageLabel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/messageLabel</TokenIdentifier>
			<Abstract type="html">The currently displayed message used to indicate an special playing circumstance, such as Audio Only or No Ads Available.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) IBOutlet UILabel *messageLabel</Declaration>
			
			
			<Anchor>//api/name/messageLabel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/displayMessage:</TokenIdentifier>
			<Abstract type="html">Display a special playback circumstance message.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>- (void)displayMessage:(NSString *)message</Declaration>
			<Parameters>
				<Parameter>
					<Name>message</Name>
					<Abstract type="html">The string currently displayed over the player</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/displayMessage:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/clearMessage</TokenIdentifier>
			<Abstract type="html">Clear the special playback circumstance message.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>- (void)clearMessage</Declaration>
			
			
			<Anchor>//api/name/clearMessage</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setLblCount:</TokenIdentifier>
			<Abstract type="html">Debug display of remaining time in an ad break.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) IBOutlet UILabel *lblCount</Declaration>
			
			
			<Anchor>//api/name/lblCount</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/lblCount</TokenIdentifier>
			<Abstract type="html">Debug display of remaining time in an ad break.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) IBOutlet UILabel *lblCount</Declaration>
			
			
			<Anchor>//api/name/lblCount</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/lblCount</TokenIdentifier>
			<Abstract type="html">Debug display of remaining time in an ad break.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) IBOutlet UILabel *lblCount</Declaration>
			
			
			<Anchor>//api/name/lblCount</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/setKeepPlayingContent:</TokenIdentifier>
			<Abstract type="html">DO NOT MODIFY THIS PROPERTY.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) BOOL keepPlayingContent</Declaration>
			
			
			<Anchor>//api/name/keepPlayingContent</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVMoviePlayerController/keepPlayingContent</TokenIdentifier>
			<Abstract type="html">DO NOT MODIFY THIS PROPERTY.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) BOOL keepPlayingContent</Declaration>
			
			
			<Anchor>//api/name/keepPlayingContent</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVMoviePlayerController/keepPlayingContent</TokenIdentifier>
			<Abstract type="html">DO NOT MODIFY THIS PROPERTY.</Abstract>
			<DeclaredIn>VVMoviePlayerController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) BOOL keepPlayingContent</Declaration>
			
			
			<Anchor>//api/name/keepPlayingContent</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
	</File>
</Tokens>