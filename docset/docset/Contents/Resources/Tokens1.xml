<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/VVCMSAPI.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/VVCMSAPI</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
            
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/VVCMSAPI/vvCMSAPI</TokenIdentifier>
			<Abstract type="html">Factory method used to create a new VVCMSAPI singlton.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>+ (VVCMSAPI *)vvCMSAPI</Declaration>
			
			
			<Anchor>//api/name/vvCMSAPI</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/setDelegate:error:</TokenIdentifier>
			<Abstract type="html">Set Delegate</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>- (void)setDelegate:(id&lt;VVCMSAPIDelegate&gt;)delegate error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>delegate</Name>
					<Abstract type="html">The delegate object that implements the handlers for the VVCMSAPIDelegate protocol</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">By-Reference error pointer for error handling</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDelegate:error:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/setDelegate:</TokenIdentifier>
			<Abstract type="html">The delegate upon which the completion methods will be called.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (assign) id&lt;VVCMSAPIDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/delegate</TokenIdentifier>
			<Abstract type="html">The delegate upon which the completion methods will be called.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (assign) id&lt;VVCMSAPIDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVCMSAPI/delegate</TokenIdentifier>
			<Abstract type="html">The delegate upon which the completion methods will be called.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (assign) id&lt;VVCMSAPIDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/authenticationRequestForDomain:username:andPassword:</TokenIdentifier>
			<Abstract type="html">Authenticates with username and password and initiates VVCMSAPI</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>- (void)authenticationRequestForDomain:(NSString *)domain username:(NSString *)username andPassword:(NSString *)password</Declaration>
			<Parameters>
				<Parameter>
					<Name>domain</Name>
					<Abstract type="html">The domain for further API calls.  Site can be appended onto domain.  Ex: @&quot;vcloud.volarvideo.com/test-site&quot;</Abstract>
				</Parameter><Parameter>
					<Name>username</Name>
					<Abstract type="html">Username for authenticating. Pass nil for public access.</Abstract>
				</Parameter><Parameter>
					<Name>password</Name>
					<Abstract type="html">Password for authenticating. Pass nil for public access.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/authenticationRequestForDomain:username:andPassword:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/authenticationRequestForDomain:siteSlug:username:andPassword:</TokenIdentifier>
			<Abstract type="html">Authenticates with username and password and initiates VVCMSAPI</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>- (void)authenticationRequestForDomain:(NSString *)domain siteSlug:(NSString *)siteSlug username:(NSString *)username andPassword:(NSString *)password</Declaration>
			<Parameters>
				<Parameter>
					<Name>domain</Name>
					<Abstract type="html">The domain for further API calls.</Abstract>
				</Parameter><Parameter>
					<Name>siteSlug</Name>
					<Abstract type="html">The site slug for further API calls.</Abstract>
				</Parameter><Parameter>
					<Name>username</Name>
					<Abstract type="html">Username for authenticating. Pass nil for public access.</Abstract>
				</Parameter><Parameter>
					<Name>password</Name>
					<Abstract type="html">Password for authenticating. Pass nil for public access.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/authenticationRequestForDomain:siteSlug:username:andPassword:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/requestBroadcastsWithStatus:page:resultsPerPage:</TokenIdentifier>
			<Abstract type="html">Request VVCMSBroadcast objects for the current domain, site, and user.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>- (void)requestBroadcastsWithStatus:(VVCMSBroadcastStatus)status page:(int)page resultsPerPage:(int)items</Declaration>
			<Parameters>
				<Parameter>
					<Name>status</Name>
					<Abstract type="html">Used to filter results by the broadcast status.  One of the following VVCMSBroadcastsStatus values:

    VVCMSBroadcastStatusUnknown,
    VVCMSBroadcastStatusScheduled,
    VVCMSBroadcastStatusStreaming,
    VVCMSBroadcastStatusArchived,
    VVCMSBroadcastStatusAll</Abstract>
				</Parameter><Parameter>
					<Name>page</Name>
					<Abstract type="html">The pagenation page</Abstract>
				</Parameter><Parameter>
					<Name>items</Name>
					<Abstract type="html">The number of results per page (for pagenation)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestBroadcastsWithStatus:page:resultsPerPage:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/requestSectionsPage:resultsPerPage:</TokenIdentifier>
			<Abstract type="html">Request an array of all the sections available for the current site</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>- (void)requestSectionsPage:(int)page resultsPerPage:(int)items</Declaration>
			<Parameters>
				<Parameter>
					<Name>page</Name>
					<Abstract type="html">The pagenation page</Abstract>
				</Parameter><Parameter>
					<Name>items</Name>
					<Abstract type="html">The number of results per page (for pagenation)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestSectionsPage:resultsPerPage:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/setSection_id:</TokenIdentifier>
			<Abstract type="html">Set the section id used to filter requestBroadcastsWithStatus:page:resultsPerPage: results.  Section id values can be obtained as a key value in the dictionaries returned by the return delegate for requestSectionsPage:resultsPerPage: method.  Set to nil to not filter.  Default value is nil.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *section_id</Declaration>
			
			
			<Anchor>//api/name/section_id</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/section_id</TokenIdentifier>
			<Abstract type="html">Set the section id used to filter requestBroadcastsWithStatus:page:resultsPerPage: results.  Section id values can be obtained as a key value in the dictionaries returned by the return delegate for requestSectionsPage:resultsPerPage: method.  Set to nil to not filter.  Default value is nil.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *section_id</Declaration>
			
			
			<Anchor>//api/name/section_id</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVCMSAPI/section_id</TokenIdentifier>
			<Abstract type="html">Set the section id used to filter requestBroadcastsWithStatus:page:resultsPerPage: results.  Section id values can be obtained as a key value in the dictionaries returned by the return delegate for requestSectionsPage:resultsPerPage: method.  Set to nil to not filter.  Default value is nil.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *section_id</Declaration>
			
			
			<Anchor>//api/name/section_id</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/requestPlaylistsPage:resultsPerPage:</TokenIdentifier>
			<Abstract type="html">Request an array of all the playlists available for the current site</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>- (void)requestPlaylistsPage:(int)page resultsPerPage:(int)items</Declaration>
			<Parameters>
				<Parameter>
					<Name>page</Name>
					<Abstract type="html">The pagenation page</Abstract>
				</Parameter><Parameter>
					<Name>items</Name>
					<Abstract type="html">The number of results per page (for pagenation)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/requestPlaylistsPage:resultsPerPage:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/setPlaylist_id:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *playlist_id</Declaration>
			
			
			<Anchor>//api/name/playlist_id</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/playlist_id</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *playlist_id</Declaration>
			
			
			<Anchor>//api/name/playlist_id</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVCMSAPI/playlist_id</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *playlist_id</Declaration>
			
			
			<Anchor>//api/name/playlist_id</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/setBeforeDate:</TokenIdentifier>
			<Abstract type="html">Limit broadcasts results to broadcasts that occur before this date.  Used by requestBroadcastsWithStatus:page:resultsPerPage: to limit the returned results.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDate *beforeDate</Declaration>
			
			
			<Anchor>//api/name/beforeDate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/beforeDate</TokenIdentifier>
			<Abstract type="html">Limit broadcasts results to broadcasts that occur before this date.  Used by requestBroadcastsWithStatus:page:resultsPerPage: to limit the returned results.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDate *beforeDate</Declaration>
			
			
			<Anchor>//api/name/beforeDate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVCMSAPI/beforeDate</TokenIdentifier>
			<Abstract type="html">Limit broadcasts results to broadcasts that occur before this date.  Used by requestBroadcastsWithStatus:page:resultsPerPage: to limit the returned results.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDate *beforeDate</Declaration>
			
			
			<Anchor>//api/name/beforeDate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/setAfterDate:</TokenIdentifier>
			<Abstract type="html">Limit broadcasts results to broadcasts that occur after this date.  Used by requestBroadcastsWithStatus:page:resultsPerPage: to limit the returned results.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDate *afterDate</Declaration>
			
			
			<Anchor>//api/name/afterDate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/afterDate</TokenIdentifier>
			<Abstract type="html">Limit broadcasts results to broadcasts that occur after this date.  Used by requestBroadcastsWithStatus:page:resultsPerPage: to limit the returned results.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDate *afterDate</Declaration>
			
			
			<Anchor>//api/name/afterDate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVCMSAPI/afterDate</TokenIdentifier>
			<Abstract type="html">Limit broadcasts results to broadcasts that occur after this date.  Used by requestBroadcastsWithStatus:page:resultsPerPage: to limit the returned results.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDate *afterDate</Declaration>
			
			
			<Anchor>//api/name/afterDate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/setSortBy:</TokenIdentifier>
			<Abstract type="html">Used to change which broadcast property by which results returned by requestBroadcastsWithStatus:page:resultsPerPage: are sorted.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) VVCMSAPISortBy sortBy</Declaration>
			
			
			<Anchor>//api/name/sortBy</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/sortBy</TokenIdentifier>
			<Abstract type="html">Used to change which broadcast property by which results returned by requestBroadcastsWithStatus:page:resultsPerPage: are sorted.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) VVCMSAPISortBy sortBy</Declaration>
			
			
			<Anchor>//api/name/sortBy</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVCMSAPI/sortBy</TokenIdentifier>
			<Abstract type="html">Used to change which broadcast property by which results returned by requestBroadcastsWithStatus:page:resultsPerPage: are sorted.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) VVCMSAPISortBy sortBy</Declaration>
			
			
			<Anchor>//api/name/sortBy</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/setSortDir:</TokenIdentifier>
			<Abstract type="html">Used to set direction (ascending, descending) in which results returned by requestBroadcastsWithStatus:page:resultsPerPage: are sorted.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) VVCMSAPISortDirection sortDir</Declaration>
			
			
			<Anchor>//api/name/sortDir</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/sortDir</TokenIdentifier>
			<Abstract type="html">Used to set direction (ascending, descending) in which results returned by requestBroadcastsWithStatus:page:resultsPerPage: are sorted.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) VVCMSAPISortDirection sortDir</Declaration>
			
			
			<Anchor>//api/name/sortDir</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVCMSAPI/sortDir</TokenIdentifier>
			<Abstract type="html">Used to set direction (ascending, descending) in which results returned by requestBroadcastsWithStatus:page:resultsPerPage: are sorted.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) VVCMSAPISortDirection sortDir</Declaration>
			
			
			<Anchor>//api/name/sortDir</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/setSearchTitle:</TokenIdentifier>
			<Abstract type="html">Useful for searches, as this accepts incomplete titles and returns all matches.   Used in searching the result of the following methods:</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *searchTitle</Declaration>
			
			
			<Anchor>//api/name/searchTitle</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/searchTitle</TokenIdentifier>
			<Abstract type="html">Useful for searches, as this accepts incomplete titles and returns all matches.   Used in searching the result of the following methods:</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *searchTitle</Declaration>
			
			
			<Anchor>//api/name/searchTitle</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVCMSAPI/searchTitle</TokenIdentifier>
			<Abstract type="html">Useful for searches, as this accepts incomplete titles and returns all matches.   Used in searching the result of the following methods:</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *searchTitle</Declaration>
			
			
			<Anchor>//api/name/searchTitle</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/logout</TokenIdentifier>
			<Abstract type="html">End authenticated session</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>- (void)logout</Declaration>
			
			
			<Anchor>//api/name/logout</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/isReachable</TokenIdentifier>
			<Abstract type="html">Reachability status of VolarVideo CMS domain and site</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>- (BOOL)isReachable</Declaration>
			
			
			<Anchor>//api/name/isReachable</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/latestReachabilityResult</TokenIdentifier>
			<Abstract type="html">Last known reachability result</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>- (BOOL)latestReachabilityResult</Declaration>
			
			
			<Anchor>//api/name/latestReachabilityResult</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/siteName</TokenIdentifier>
			<Abstract type="html">Longform of sitename, useful if multiple sites are to be managed.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>- (NSString *)siteName</Declaration>
			
			
			<Anchor>//api/name/siteName</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/setSites:</TokenIdentifier>
			<Abstract type="html">Dictionary of available sites with the following key value pairs:</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *sites</Declaration>
			
			
			<Anchor>//api/name/sites</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/sites</TokenIdentifier>
			<Abstract type="html">Dictionary of available sites with the following key value pairs:</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *sites</Declaration>
			
			
			<Anchor>//api/name/sites</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVCMSAPI/sites</TokenIdentifier>
			<Abstract type="html">Dictionary of available sites with the following key value pairs:</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *sites</Declaration>
			
			
			<Anchor>//api/name/sites</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/setSiteSlug:</TokenIdentifier>
			<Abstract type="html">  Current site slug.  Note that this value can be supplimented by siteSlugs passed to setSiteSlugs:</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *siteSlug</Declaration>
			
			
			<Anchor>//api/name/siteSlug</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/siteSlug</TokenIdentifier>
			<Abstract type="html">  Current site slug.  Note that this value can be supplimented by siteSlugs passed to setSiteSlugs:</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *siteSlug</Declaration>
			
			
			<Anchor>//api/name/siteSlug</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVCMSAPI/siteSlug</TokenIdentifier>
			<Abstract type="html">  Current site slug.  Note that this value can be supplimented by siteSlugs passed to setSiteSlugs:</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *siteSlug</Declaration>
			
			
			<Anchor>//api/name/siteSlug</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/setDomain:</TokenIdentifier>
			<Abstract type="html">Current domain</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *domain</Declaration>
			
			
			<Anchor>//api/name/domain</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/domain</TokenIdentifier>
			<Abstract type="html">Current domain</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *domain</Declaration>
			
			
			<Anchor>//api/name/domain</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVCMSAPI/domain</TokenIdentifier>
			<Abstract type="html">Current domain</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *domain</Declaration>
			
			
			<Anchor>//api/name/domain</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/setSiteSlugs:</TokenIdentifier>
			<Abstract type="html">List of siteSlugs used for multi-site queries for broadcasts, playlists and sections.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray *siteSlugs</Declaration>
			
			
			<Anchor>//api/name/siteSlugs</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/VVCMSAPI/siteSlugs</TokenIdentifier>
			<Abstract type="html">List of siteSlugs used for multi-site queries for broadcasts, playlists and sections.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray *siteSlugs</Declaration>
			
			
			<Anchor>//api/name/siteSlugs</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/VVCMSAPI/siteSlugs</TokenIdentifier>
			<Abstract type="html">List of siteSlugs used for multi-site queries for broadcasts, playlists and sections.</Abstract>
			<DeclaredIn>VVCMSAPI.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray *siteSlugs</Declaration>
			
			
			<Anchor>//api/name/siteSlugs</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
        
	</File>
</Tokens>